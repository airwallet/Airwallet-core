import { combineReducers } from 'redux';

import * as UpperLevelKeys from '../constants/store/upper-level-keys';
import LoginReducer from './login';
import WalletReducer from './wallet';
import userInfoReducer from './userInfo';
import commonReducer from './common';


// Combine all application reducers to delegate them to
// the root reducer that will be exported as the default
const appReducer = combineReducers({
  [UpperLevelKeys.LOGIN]: LoginReducer,
  [UpperLevelKeys.WALLET]: WalletReducer,
  [UpperLevelKeys.USER_INFO]: userInfoReducer,
  [UpperLevelKeys.COMMON]: commonReducer,
});

export default (state, action) => {
  // Handle logout on the global level to reset the whole Redux store and as a
  // result application state so we don't need to reset each reducer separately.

  /* if (action.type === LogoutActions.LOGOUT__LOGOUT__SUBTYPES.START) {
    // Reassign the reference of a local variable called `state` to `undefined`
    // before passing it to another reducer. Reducers are supposed to return
    // the initial state when they are called with `undefined` as the first
    // argument, no matter the action.

    // eslint-disable-next-line
    state = undefined;
  } */

  // Delegate handling the action to the reducer generated by `combineReducers()`
  return appReducer(state, action);
};
